USE [MRP_ROMP]
GO

/****** Object:  StoredProcedure [old].[SP_DIM_COMMUNITY_INVOLVEMENT]    Script Date: 2020-04-09 12:51:00 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE OR ALTER           PROCEDURE [old].[SP_DIM_COMMUNITY_INVOLVEMENT]
AS
BEGIN

BEGIN TRAN

SET NOCOUNT ON;

DECLARE @TABLE_COUNT INT
DECLARE @DATA_COUNT INT
DECLARE @TABLE_NAME VARCHAR(1000)
DECLARE @QUESTION VARCHAR(4000)
DECLARE @COLUMN VARCHAR(4000)
DECLARE @QUERY VARCHAR(MAX) = ''
DECLARE @STU_QUERY VARCHAR(MAX) = ''
DECLARE @RESI_QUERY VARCHAR(MAX) = ''
DECLARE @CNT_DATA INT = 1
DECLARE @CNT_TABLE INT = 1

DROP TABLE IF EXISTS ##OldCommunity

SELECT ROW_NUMBER() OVER(PARTITION BY TABLE_NAME ORDER BY COMMUNITY_INV) AS ROW_ID,
TABLE_NAME,
COMMUNITY_INV,
STRING_AGG('IIF('+COLUMN_NUMBER+'<> '''','+COLUMN_NUMBER,',') + ',''''))' AS COLUMN_VALUE INTO ##OldCommunity
FROM (
SELECT TABLE_NAME,
CASE 
WHEN UPPER(COLUMN_NAME) LIKE 'COMMUNITY INVOLVEMENT_%' THEN SUBSTRING(SUBSTRING(COLUMN_NAME,CHARINDEX('_',COLUMN_NAME)+1,LEN(COLUMN_NAME)),0,CHARINDEX('?',SUBSTRING(COLUMN_NAME,CHARINDEX('_',COLUMN_NAME)+1,LEN(COLUMN_NAME)))+1)
WHEN UPPER(COLUMN_NAME) NOT LIKE 'COMMUNITY INVOLVEMENT_%' THEN SUBSTRING(COLUMN_NAME, 0, CHARINDEX('?',COLUMN_NAME)+1)
END AS COMMUNITY_INV,
COLUMN_NUMBER
FROM generic.table_columns
WHERE 
UPPER(COLUMN_NAME) LIKE '%COMMUNITY%'
AND (UPPER(COLUMN_NAME) LIKE '%YES%' OR UPPER(COLUMN_NAME) LIKE '%NO%')
AND UPPER(COLUMN_NAME) NOT LIKE '%RESPONSE'
AND UPPER(COLUMN_NAME) NOT LIKE '%I DID NOT RECIEVE AN ORIENTATION'
AND TABLE_NAME = 'generic.old_resident_survey'

UNION ALL

SELECT TABLE_NAME,
CASE 
WHEN UPPER(COLUMN_NAME) LIKE 'COMMUNITY INVOLVEMENT_%' THEN SUBSTRING(SUBSTRING(COLUMN_NAME,CHARINDEX('_',COLUMN_NAME)+1,LEN(COLUMN_NAME)),0,CHARINDEX('?',SUBSTRING(COLUMN_NAME,CHARINDEX('_',COLUMN_NAME)+1,LEN(COLUMN_NAME)))+1)
WHEN UPPER(COLUMN_NAME) NOT LIKE 'COMMUNITY INVOLVEMENT_%' THEN SUBSTRING(COLUMN_NAME, 0, CHARINDEX('?',COLUMN_NAME)+1)
END AS COMMUNITY_INV,
COLUMN_NUMBER
FROM generic.table_columns
WHERE 
UPPER(COLUMN_NAME) LIKE '%COMMUNITY%'
AND (UPPER(COLUMN_NAME) LIKE '%YES%' OR UPPER(COLUMN_NAME) LIKE '%NO%' AND UPPER(COLUMN_NAME) NOT LIKE '%NOT SURE%')
AND UPPER(COLUMN_NAME) NOT LIKE '%RESPONSE'
AND UPPER(COLUMN_NAME) NOT LIKE '%I DID NOT RECIEVE AN ORIENTATION'
AND TABLE_NAME = 'generic.old_student_survey') BASE
GROUP BY TABLE_NAME, COMMUNITY_INV;

DROP TABLE IF EXISTS ##OldTableNames

SELECT ROW_NUMBER() OVER(ORDER BY TABLE_NAME) AS ROW_ID, TABLE_NAME INTO ##OldTableNames FROM(SELECT DISTINCT TABLE_NAME FROM ##OldCommunity) TAB;

SELECT @TABLE_COUNT = COUNT(1) FROM ##OldTableNames;

WHILE @CNT_TABLE <= @TABLE_COUNT
BEGIN

	SELECT @TABLE_NAME = TABLE_NAME FROM ##OldTableNames WHERE ROW_ID = @CNT_TABLE;

	SELECT @DATA_COUNT = COUNT(1) FROM ##OldCommunity WHERE TABLE_NAME = @TABLE_NAME;

	SET @QUERY = ''
	SET @CNT_DATA = 1
	
	WHILE @CNT_DATA <= @DATA_COUNT
	BEGIN

		SELECT @QUESTION = COMMUNITY_INV, @COLUMN = COLUMN_VALUE FROM ##OldCommunity WHERE ROW_ID = @CNT_DATA AND TABLE_NAME = @TABLE_NAME

		SET @QUERY = @QUERY + @COLUMN + ' AS ''Q' + CAST(@CNT_DATA AS VARCHAR) + ''','

		SET @CNT_DATA = @CNT_DATA + 1
	END

	SET @QUERY = 'SELECT CAST(CAST(COLUMN1 AS FLOAT) AS BIGINT) AS RESPONDENT_ID, ' + SUBSTRING(@QUERY, 0, LEN(@QUERY))

	IF UPPER(@TABLE_NAME) = 'GENERIC.OLD_STUDENT_SURVEY'
	BEGIN

	SET @STU_QUERY = @STU_QUERY + @QUERY + ' INTO ##StudCommunityInvolvement FROM ' + @TABLE_NAME

	END

	IF UPPER(@TABLE_NAME) = 'GENERIC.OLD_RESIDENT_SURVEY'
	BEGIN

	SET @RESI_QUERY = @RESI_QUERY + @QUERY + ' INTO ##ResCommunityInvolvement FROM ' + @TABLE_NAME

	END

	SET @CNT_TABLE = @CNT_TABLE + 1

END

DROP TABLE IF EXISTS ##ResCommunityInvolvement

DROP TABLE IF EXISTS ##StudCommunityInvolvement

EXECUTE (@STU_QUERY)

EXECUTE (@RESI_QUERY)

SELECT @TABLE_COUNT = COUNT(1) FROM old.DimCommunityInvolvement;

IF @TABLE_COUNT > 0
BEGIN

DELETE FROM old.DimCommunityInvolvement

END

INSERT INTO old.DimCommunityInvolvement
SELECT
FORMAT(GETDATE(), 'yyyyMMdd') AS CYCL_TIME_ID,
RESPONDENT_ID,
CASE WHEN CI_VALUE > 6 THEN 'High'
	 WHEN CI_VALUE <=6 AND CI_VALUE > 3 THEN 'Medium'
	 WHEN CI_VALUE <=3 AND CI_VALUE > 0 THEN 'Low'
	 WHEN CI_VALUE = 0 THEN 'N/A'
	 END AS COMMUNITY_INVOLVEMENT
FROM(
SELECT RESPONDENT_ID, 
(Q1 + Q2 + Q3 + Q4 + Q5 + Q6 + Q7 + Q8) AS CI_VALUE
FROM(
SELECT RESPONDENT_ID,
CASE WHEN UPPER(Q1) = 'YES' THEN 1
ELSE 0 END AS Q1,
CASE WHEN UPPER(Q2) = 'YES' THEN 1
ELSE 0 END AS Q2,
CASE WHEN UPPER(Q3) = 'YES' THEN 1
ELSE 0 END AS Q3,
CASE WHEN UPPER(Q4) = 'YES' THEN 1
ELSE 0 END AS Q4,
CASE WHEN UPPER(Q5) = 'YES' THEN 1
ELSE 0 END AS Q5,
CASE WHEN UPPER(Q6) = 'YES' THEN 1
ELSE 0 END AS Q6,
CASE WHEN UPPER(Q7) = 'YES' THEN 1
ELSE 0 END AS Q7,
CASE WHEN UPPER(Q8) = 'YES' THEN 1
ELSE 0 END AS Q8
FROM ##ResCommunityInvolvement) CI
) RC

UNION ALL

SELECT
FORMAT(GETDATE(), 'yyyyMMdd') AS CYCL_TIME_ID,
RESPONDENT_ID,
CASE WHEN CI_VALUE > 4 THEN 'High'
	 WHEN CI_VALUE <=4 AND CI_VALUE > 2 THEN 'Medium'
	 WHEN CI_VALUE <=2 AND CI_VALUE > 0 THEN 'Low'
	 WHEN CI_VALUE = 0 THEN 'N/A'
	 END AS COMMUNITY_INVOLVEMENT
FROM(
SELECT RESPONDENT_ID, 
(Q1 + Q2 + Q3 + Q4 + Q5 + Q6) AS CI_VALUE
FROM(
SELECT RESPONDENT_ID,
CASE WHEN UPPER(Q1) = 'YES' THEN 1
ELSE 0 END AS Q1,
CASE WHEN UPPER(Q2) = 'YES' THEN 1
ELSE 0 END AS Q2,
CASE WHEN UPPER(Q3) = 'YES' THEN 1
ELSE 0 END AS Q3,
CASE WHEN UPPER(Q4) = 'YES' THEN 1
ELSE 0 END AS Q4,
CASE WHEN UPPER(Q5) = 'YES' THEN 1
ELSE 0 END AS Q5,
CASE WHEN UPPER(Q6) = 'YES' THEN 1
ELSE 0 END AS Q6
FROM ##StudCommunityInvolvement) CI
) SC

COMMIT TRAN;

END;
GO


