USE [MRP_ROMP]
GO

/****** Object:  StoredProcedure [old].[SP_DIM_RESPONDENT_ANSWER]    Script Date: 2020-04-09 12:51:48 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE OR ALTER                   PROCEDURE [old].[SP_DIM_RESPONDENT_ANSWER]
AS
BEGIN

BEGIN TRAN

SET NOCOUNT ON;

DECLARE @TABLE_COUNT INT
DECLARE @DATA_COUNT INT
DECLARE @TABLE_NAME VARCHAR(1000)
DECLARE @QUESTION VARCHAR(4000)
DECLARE @QUESTION_HEADING VARCHAR(4000)
DECLARE @COLUMN VARCHAR(4000)
DECLARE @QUERY VARCHAR(MAX) = ''
DECLARE @QUERY_COLUMN VARCHAR(MAX) = ''
DECLARE @UNION_QUERY VARCHAR(MAX) = ''
DECLARE @CNT_QUES INT = 1
DECLARE @QUESTION_ANSWER_ID INT 

DROP TABLE IF EXISTS ##OldQuestion

SELECT ROW_NUMBER() OVER(ORDER BY QUESTION) AS ROW_ID,
TABLE_NAME,
QUESTION_HEADING,
QUESTION INTO ##OldQuestion
FROM (
SELECT DISTINCT 
TABLE_NAME, QUESTION_HEADING, QUESTION
FROM
generic.question_answers_list WHERE TABLE_NAME LIKE 'generic.old_%') BASE

SELECT @DATA_COUNT = COUNT(1) FROM ##OldQuestion

WHILE @CNT_QUES <= @DATA_COUNT
BEGIN

SELECT @TABLE_NAME = TABLE_NAME, @QUESTION = QUESTION, @QUESTION_HEADING = QUESTION_HEADING FROM ##OldQuestion WHERE ROW_ID = @CNT_QUES

IF UPPER(@QUESTION_HEADING) <> 'NONE'
BEGIN

SELECT @QUERY_COLUMN = 
STRING_AGG(' CASE WHEN ' + COLUMN_NUMBER + ' <> '''' THEN ' + COLUMN_NUMBER + ' + ''+'' ELSE ''+'' END',' + ' )
FROM generic.table_columns
WHERE 
COLUMN_NAME LIKE '%' + @QUESTION_HEADING + '%' + @QUESTION + '%'
AND TABLE_NAME LIKE @TABLE_NAME
GROUP BY TABLE_NAME;

SET @QUESTION = TRIM(REPLACE(REPLACE(SUBSTRING(@QUESTION, CHARINDEX('.',@QUESTION)+1, LEN(@QUESTION)),'?',''),':',''))

END

IF UPPER(@QUESTION_HEADING) = 'NONE'
BEGIN

SELECT @QUERY_COLUMN = 
STRING_AGG(' CASE WHEN ' + COLUMN_NUMBER + ' <> '''' THEN ' + COLUMN_NUMBER + ' + ''+'' ELSE ''+'' END',' + ' )
FROM generic.table_columns
WHERE 
COLUMN_NAME LIKE '%' + @QUESTION + '%'
AND TABLE_NAME LIKE @TABLE_NAME
GROUP BY TABLE_NAME;

SET @QUESTION = REPLACE(REPLACE(@QUESTION,'?',''),':','')

END

SELECT @QUESTION_ANSWER_ID = QUESTION_ANSWER_ID
FROM old.DimAnswer DA 
JOIN old.DimQuestion DQ ON DA.QUESTION_ID = DQ.QUESTION_ID
WHERE ANSWER IN ('N/A', 'Others', 'Other', 'Poor. How could it have been better?','Do Not Know')
AND QUESTION = @QUESTION

SET @QUERY = '
SELECT
RESPONDENT_ID,
ISNULL(DAQ.QUESTION_ANSWER_ID, ' + CAST(ISNULL(@QUESTION_ANSWER_ID,0) AS VARCHAR(10)) + ') AS QUESTION_ANSWER_ID,
BASE.QUESTION
FROM (
SELECT DISTINCT RESPONDENT_ID, COLUMN_VALUE, QUESTION
FROM (
SELECT RESPONDENT_ID, TRIM(VALUE) AS COLUMN_VALUE, QUESTION
FROM (
SELECT CAST(CAST(COLUMN1 AS FLOAT) AS BIGINT) AS RESPONDENT_ID, 
' + @QUERY_COLUMN + ' AS COLUMN_VALUE,
'''+ @QUESTION + ''' AS QUESTION
FROM ' + @TABLE_NAME + ' 
) SF_BASE
CROSS APPLY string_split(SF_BASE.COLUMN_VALUE, ''+'')
) SS_BASE
WHERE COLUMN_VALUE <> '''' 
) BASE
LEFT JOIN 
( SELECT DA.QUESTION_ID, DA.ANSWER_ID, DA.ANSWER, DQ.QUESTION, DA.QUESTION_ANSWER_ID
FROM
old.DimAnswer DA
JOIN old.DimQuestion DQ ON DQ.QUESTION_ID = DA.QUESTION_ID
) DAQ ON UPPER(BASE.QUESTION) = UPPER(DAQ.QUESTION) AND UPPER(DAQ.ANSWER) = UPPER(BASE.COLUMN_VALUE)'

SET @UNION_QUERY = @UNION_QUERY + ' UNION ALL ' + @QUERY

SET @CNT_QUES = @CNT_QUES + 1

END

SET @UNION_QUERY = 'SELECT * INTO ##OldQuestionRespondent FROM ( ' + SUBSTRING(@UNION_QUERY, 12, LEN(@UNION_QUERY)) + ' ) BASE '

DROP TABLE IF EXISTS ##OldQuestionRespondent

EXECUTE (@UNION_QUERY)

SELECT @TABLE_COUNT = COUNT(1) FROM old.DimRespondentAnswer

IF(@TABLE_COUNT > 0)
BEGIN
DELETE old.DimRespondentAnswer
END

INSERT INTO old.DimRespondentAnswer
SELECT 
FORMAT(GETDATE(), 'yyyyMMdd') AS CYCL_TIME_ID,
RESPONDENT_ID,
QUESTION_ANSWER_ID 
FROM ##OldQuestionRespondent

COMMIT TRAN;

END;
GO


